#!/bin/bash

# Exit immediately if a command exits with a non-zero status
set -e

usageHelp() {
    echo "Usage: $0 <repository> [target-branch] [source-dir] [target-dir]"
    echo "  repository: The GitHub repository in the format 'user/repo'."
    echo "  target-branch: Optional. The branch to which changes should be pushed. Defaults to 'deployment'."
    echo "  source-dir: Optional. The directory where should store the files. Defaults to 'cd'."
    echo "  target-dir: Optional. The directory or file paths that should be copied to the target-dir. Defaults to '../.temp/**'"
    echo "  example: ./ci/tagGen \${{ github.repository }} source cd .temp/**"
}

# Check if the repository argument is provided
if [ -z "$1" ]; then
  usageHelp
  exit 1
fi

REPOSITORY=$1
TARGET_BRANCH=${2:-deployment}
SOURCE_DIR=${3:-"cd/"}
TARGET_DIR=${4:-"../.temp/**"}
CURRENT_BRANCH=$(git branch --show-current)
CURRENT_PATH=$(pwd)

# Extract the project name from the REPOSITORY variable
PROJECT_NAME=$(echo "$REPOSITORY" | cut -d'/' -f2)

echo "[TAG-GENERATOR] initializing..."
echo "  REPOSITORY=$REPOSITORY"
echo "  TARGET_BRANCH=$TARGET_BRANCH"
echo "  TARGET_DIR=$TARGET_DIR"
echo "  SOURCE_DIR=$SOURCE_DIR"

git config --global user.name "[TAG-GENERATOR] - deployment"
git config --global user.email "eliasmeireles@gmail.com"

loadingLastCommitInfo() {
   echo "Current branch: $(git branch --show-current)"
   LAST_COMMIT_MSG=$(git log -1 --pretty=%B)
   echo "Last commit message: $LAST_COMMIT_MSG"

   LAST_COMMIT_HASH=$(git rev-parse --short HEAD)
}

copyingFiles() {
    echo "Copying files from $TARGET_DIR to $SOURCE_DIR"

    mkdir -p ${PROJECT_NAME}/${SOURCE_DIR}/

    cp -r $TARGET_DIR ${PROJECT_NAME}/${SOURCE_DIR}/

    echo "Files in $TARGET_DIR"
    ls -lah "$TARGET_DIR"

    echo "Files in $SOURCE_DIR"
    ls -lah ${PROJECT_NAME}/${SOURCE_DIR}
}

echo "Loading last commit info"
loadingLastCommitInfo

echo "Cloning repository"
git clone "git@github.com:${REPOSITORY}.git"

copyingFiles

rm -rf .git

cd "$PROJECT_NAME" || exit 1

git stash

# Fetch and switch to the target branch, or create it if it does not exist
git checkout "$TARGET_BRANCH" || git checkout -b "$TARGET_BRANCH"

# Fetch and rebase with the remote branch before pushing
git pull --rebase origin "$TARGET_BRANCH" || true

git stash pop || true

# Create a commit message with user info and link to commit changes
COMMIT_MESSAGE="[TAG-GENERATOR] execution on [${LAST_COMMIT_HASH}](https://github.com/${REPOSITORY}/commit/${LAST_COMMIT_HASH})
${LAST_COMMIT_MSG}
"
echo "$COMMIT_MESSAGE"

# Add, commit, and push the changes
git add ./${SOURCE_DIR}

git commit -m "$COMMIT_MESSAGE" || echo "No changes to commit"

git push origin "$TARGET_BRANCH" || (git pull --rebase && git push origin "$TARGET_BRANCH")

# Create a tagGen with repository name, flag, and commit hash
TAG="${CURRENT_BRANCH}-${LAST_COMMIT_HASH}"
TAG_MESSAGE="${CURRENT_BRANCH}-${LAST_COMMIT_HASH}
- Tag generated by [TAG-GENERATOR] action
${LAST_COMMIT_MSG}
"
echo "$TAG_MESSAGE"

echo "Creating a new tag: $TAG"
git tag -a "$TAG" -m "$TAG_MESSAGE"
git push origin "$TAG"

# Output the tagGen
echo "TAG=$TAG" >> "$GITHUB_ENV"
# Log the generated tagGen name
echo "Generated tag name: $TAG"
